# -*- coding: utf-8 -*-
"""Book_Recommendation_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xArk3wP-7_duYxKF_nvUFvoYGM8xq5HR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import neighbors
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans

df = pd.read_csv("books.csv", error_bad_lines= False)
df.head()

df.isnull().sum()

df.describe()

top_ten = df[df['ratings_count']> 1000000]
top_ten.sort_values(by = 'average_rating', ascending = False)
plt.style.use('seaborn-whitegrid')
plt.figure(figsize=(10,10))
data = top_ten.sort_values(by = 'average_rating', ascending = False).head(10)
sns.barplot(x = 'average_rating', y = 'title', data = data, palette='inferno')

books = df.groupby('authors')['title'].count().reset_index().sort_values('title', ascending = False).head(10).set_index('authors')
plt.figure(figsize= (15,10))
curve = sns.barplot(books['title'], books.index, palette= 'inferno')
curve.set_title('Top 10 authors with most books')
curve.set_label('total number of books')
totals = []
for i in curve.patches:
  totals.append(i.get_width())
total = sum(totals)
for i in curve.patches:
  curve.text(i.get_width()+.2, i.get_y()+.2, str(round(i.get_width())), fontsize =15,color = 'black')
plt.show()

rating = df.sort_values('ratings_count', ascending = False).head(10).set_index('title')
plt.figure(figsize= (15,10))
curve = sns.barplot(rating['ratings_count'], rating.index, palette = 'inferno')
totals = []
for i in curve.patches:
  totals.append(i.get_width())
total = sum(totals)
for i in curve.patches:
  curve.text(i.get_width()+.2, i.get_y()+.2, str(round(i.get_width())), fontsize = 15, color = 'black')

plt.show()

df.average_rating = df.average_rating.astype(float)
fig, curve = plt.subplots(figsize = (15,10))
sns.distplot(data['average_rating'])#curve = curve)
curve.set_title('Average rating distributions for all books', fontsize = 20)
curve.set_xlabel('Average rating', fontsize = 13)

curve = sns.relplot(data = df, x= 'average_rating', y = 'ratings_count', color = 'blue', sizes = (200,100), height = 7, marker = 'o')
plt.title("Relation between Average Ratings and Ratings Count", fontsize = 15)
curve.set_xlabels("Average Count", "Ratings Count")

df2 = df.copy()

df2.loc[(df2['average_rating']>=0) & (df2['average_rating']<=1), 'rating_between'] = "between 0 and 1"
df2.loc[(df2['average_rating']>1) & (df2['average_rating']<=2), 'rating_between'] = "between 1 and 2"
df2.loc[(df2['average_rating']>2) & (df2['average_rating']<=3), 'rating_between'] = "between 2 and 3"
df2.loc[(df2['average_rating']>3) & (df2['average_rating']<=4), 'rating_between'] = "between 3 and 4"
df2.loc[(df2['average_rating']>4) & (df2['average_rating']<=5), 'rating_between'] = "between 4 and 5"

rating_df = pd.get_dummies(df2['rating_between'])
language_df = pd.get_dummies(df2['language_code'])

features = pd.concat([rating_df, language_df, df2['average_rating'], df2['ratings_count']], axis = 1)

min_max_scaler = MinMaxScaler()
features = min_max_scaler.fit_transform(features)

models = neighbors.NearestNeighbors(n_neighbors=6, algorithm = 'ball_tree')
models.fit(features)
dist, idlist = models.kneighbors(features)

def BookRecommender(book_name):
    book_list_name = []
    book_id = df2[df2['title'] == book_name].index
    book_id = book_id[0]
    for newid in idlist[book_id]:
        book_list_name.append(df2.loc[newid].title)
    return book_list_name
    
BookNames = BookRecommender('Harry Potter and the Half-Blood Prince (Harry Potter  #6)')
BookNames



